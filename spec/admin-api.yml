openapi: 3.0.1
info:
  title: Caddy Delivery Network - Admin API
  version: 0.0.0
servers:
  - url: /api/admin
paths:
  /health:
    get:
      tags:
        - health
      summary: health check
      operationId: healthCheck
      responses:
        200:
          description: Success
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /auth/login:
    post:
      tags:
        - auth
      summary: login
      operationId: authLogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginToken"
  /user/create:
    post:
      tags:
        - user
      summary: create new user
      security:
        - JWTAuth: [admin]
      operationId: userCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfoCreate"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        409:
          description: Username conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user/list:
    get:
      tags:
        - user
      summary: get user list
      security:
        - JWTAuth: [admin]
      operationId: userList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /user/info:
    get:
      tags:
        - user
      summary: get self info
      security:
        - JWTAuth: []
      operationId: userInfoGetSelf
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"

  /user/info/{id}:
    get:
      tags:
        - user
      summary: get user info
      security:
        - JWTAuth: []
      operationId: userInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - user
      summary: update user info
      security:
        - JWTAuth: []
      operationId: userInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user/username/{id}:
    put:
      tags:
        - user
      summary: update username
      security:
        - JWTAuth: []
      operationId: userUsernameUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        409:
          description: Username conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user/password/{id}:
    put:
      tags:
        - user
      summary: update password
      security:
        - JWTAuth: []
      operationId: userPasswordUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        200:
          description: Updated successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user/delete/{id}:
    delete:
      tags:
        - user
      summary: delete user
      security:
        - JWTAuth: [admin]
      operationId: userDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user/role/{id}:
    put:
      tags:
        - user
      summary: update role
      security:
        - JWTAuth: [admin]
      operationId: userRoleUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_admin:
                  type: boolean
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /instance/create:
    post:
      tags:
        - instance
      summary: create instance
      security:
        - JWTAuth: [admin]
      operationId: instanceCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceInfoInput"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceInfoWithToken"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /instance/list:
    get:
      tags:
        - instance
      summary: get instance list
      security:
        - JWTAuth: []
      operationId: instanceList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/InstanceInfoWithID"
                  page_max:
                    $ref: "#/components/schemas/page_max"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /instance/info/{id}:
    get:
      tags:
        - instance
      summary: get instance info
      security:
        - JWTAuth: []
      operationId: instanceInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceInfoWithToken"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - instance
      summary: update instance info
      security:
        - JWTAuth: [admin]
      operationId: instanceInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /instance/delete/{id}:
    delete:
      tags:
        - instance
      summary: delete instance
      security:
        - JWTAuth: [admin]
      operationId: instanceDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /instance/rotate-token/{id}:
    post:
      tags:
        - instance
      summary: regenerate instance token
      security:
        - JWTAuth: [admin]
      operationId: instanceRotateToken
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Key rotated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceInfoWithToken"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /site/create:
    post:
      tags:
        - site
      summary: create site
      security:
        - JWTAuth: [admin]
      operationId: siteCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteInfoInput"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /site/list:
    get:
      tags:
        - site
      summary: get site list
      security:
        - JWTAuth: []
      operationId: siteList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteListResponse"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /site/info/{id}:
    get:
      tags:
        - site
      summary: get site info
      security:
        - JWTAuth: []
      operationId: siteInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - site
      summary: update site info
      security:
        - JWTAuth: [admin]
      operationId: siteInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /site/delete/{id}:
    delete:
      tags:
        - site
      summary: delete site
      security:
        - JWTAuth: [admin]
      operationId: siteDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such site
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /template/create:
    post:
      tags:
        - template
      summary: create template
      security:
        - JWTAuth: [admin]
      operationId: templateCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateInfoInput"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /template/list:
    get:
      tags:
        - template
      summary: get template list
      security:
        - JWTAuth: []
      operationId: templateList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/TemplateInfoWithID"
                  page_max:
                    $ref: "#/components/schemas/page_max"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /template/info/{id}:
    get:
      tags:
        - template
      summary: get template info
      security:
        - JWTAuth: []
      operationId: templateInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - template
      summary: update template info
      security:
        - JWTAuth: [admin]
      operationId: templateInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /template/delete/{id}:
    delete:
      tags:
        - template
      summary: delete template
      security:
        - JWTAuth: [admin]
      operationId: templateDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/create:
    post:
      tags:
        - additional-file
      summary: create additional-file
      security:
        - JWTAuth: [admin]
      operationId: additionalFileCreate
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/AdditionalFileInfoInput"
                - $ref: "#/components/schemas/AdditionalFileInfoFile"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalFileInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/list:
    get:
      tags:
        - additional-file
      summary: get additional-file list
      security:
        - JWTAuth: []
      operationId: additionalFileList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdditionalFileInfoWithID"
                  page_max:
                    $ref: "#/components/schemas/page_max"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/info/{id}:
    get:
      tags:
        - additional-file
      summary: get additional-file info
      security:
        - JWTAuth: []
      operationId: additionalFileInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalFileInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - additional-file
      summary: update additional-file info
      security:
        - JWTAuth: [admin]
      operationId: additionalFileInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdditionalFileInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalFileInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/replace/{id}:
    post:
      tags:
        - additional-file
      summary: replace additional-file
      security:
        - JWTAuth: [admin]
      operationId: additionalFileReplace
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/AdditionalFileInfoFile"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalFileInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/download/{id}:
    get:
      tags:
        - additional-file
      summary: download additional-file
      security:
        - JWTAuth: []
      operationId: additionalFileDownload
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /additional-file/delete/{id}:
    delete:
      tags:
        - additional-file
      summary: delete additional-file
      security:
        - JWTAuth: [admin]
      operationId: additionalFileDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /cert/create:
    post:
      tags:
        - cert
      summary: create cert
      security:
        - JWTAuth: [admin]
      operationId: certCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertInfoInput"
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /cert/list:
    get:
      tags:
        - cert
      summary: get cert list
      security:
        - JWTAuth: []
      operationId: certList
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  list:
                    type: array
                    items:
                      $ref: "#/components/schemas/CertInfoWithID"
                  page_max:
                    $ref: "#/components/schemas/page_max"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /cert/info/{id}:
    get:
      tags:
        - cert
      summary: get cert info
      security:
        - JWTAuth: []
      operationId: certInfoGet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Get successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such cert
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    patch:
      tags:
        - cert
      summary: update cert info
      security:
        - JWTAuth: [admin]
      operationId: certInfoUpdate
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertInfoInput"
      responses:
        200:
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertInfoWithID"
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such cert
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /cert/renew/{id}:
    post:
      tags:
        - cert
      summary: renew cert
      security:
        - JWTAuth: [admin]
      operationId: certRenew
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Renewed successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /cert/delete/{id}:
    delete:
      tags:
        - cert
      summary: delete cert
      security:
        - JWTAuth: [admin]
      operationId: certDelete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: Deleted successfully
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No such cert
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
  parameters:
    id:
      name: id
      in: path
      description: ID
      schema:
        type: integer
        format: uint
    page:
      name: page
      in: query
      description: The page number
      schema:
        type: integer
        format: uint
    limit:
      name: limit
      in: query
      description: Limit the number of items per page
      schema:
        type: integer
        format: uint
        default: 100
  schemas:
    page_max:
      type: integer
      format: int64
    objectID:
      type: integer
      format: uint
    objectWithID:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/objectID"
    timestamp:
      type: integer
      format: int64
      description: unix second
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: "Unknown error"
    LoginToken:
      type: object
      properties:
        token:
          type: string
          description: JWT Token
    UserInfoInput:
      type: object
      properties:
        name:
          type: string
          example: Nya Candy
    UserInfoFull:
      allOf:
        - $ref: "#/components/schemas/UserInfoInput"
        - type: object
          properties:
            username:
              type: string
              example: Candinya
            is_admin:
              type: boolean
    UserInfoCreate:
      allOf:
        - $ref: "#/components/schemas/UserInfoFull"
        - type: object
          properties:
            password:
              type: string
        - required:
          - username
          - password
    UserInfoWithID:
      allOf:
        - $ref: "#/components/schemas/UserInfoFull"
        - $ref: "#/components/schemas/objectWithID"
    UserListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/UserInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
    InstanceInfoInput:
      type: object
      properties:
        name:
          type: string
        pre_config:
          type: string
        is_manual_mode:
          type: boolean
        additional_file_ids:
          type: array
          description: ID list of additional files
          items:
            $ref: "#/components/schemas/objectID"
        site_ids:
          type: array
          description: ID list of sites
          items:
            $ref: "#/components/schemas/objectID"
    InstanceInfoFull:
      allOf:
        - $ref: "#/components/schemas/InstanceInfoInput"
        - type: object
          properties:
            last_seen:
              $ref: "#/components/schemas/timestamp"
#            additional_files:
#              type: array
#              description: List of additional files
#              items:
#                $ref: "#/components/schemas/AdditionalFileInfoWithID"
#            sites:
#              type: array
#              description: List of sites
#              items:
#                $ref: "#/components/schemas/SiteInfoWithID"
    InstanceInfoWithID:
      allOf:
        - $ref: "#/components/schemas/InstanceInfoFull"
        - $ref: "#/components/schemas/objectWithID"
    InstanceInfoWithToken:
      allOf:
        - $ref: "#/components/schemas/InstanceInfoWithID"
        - type: object
          properties:
            token:
              type: string
    InstanceListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/InstanceInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
    SiteInfoInput:
      type: object
      properties:
        name:
          type: string
        origin:
          type: string
        template_id:
          type: integer
          format: uint
          description: Template ID for this site
        template_values:
          type: array
          items:
            type: string
        cert_id:
          type: integer
          format: uint
          description: Cert ID for this site
    SiteInfoWithID:
      allOf:
        - $ref: "#/components/schemas/SiteInfoInput"
        - $ref: "#/components/schemas/objectWithID"
    SiteListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/SiteInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
    TemplateInfoInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        content:
          type: string
        variables:
          type: array
          items:
            type: string
    TemplateInfoWithID:
      allOf:
        - $ref: "#/components/schemas/TemplateInfoInput"
        - $ref: "#/components/schemas/objectWithID"
    TemplateListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/TemplateInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
    AdditionalFileInfoFile:
      type: object
      properties:
        content:
          type: string
          format: binary
    AdditionalFileInfoInput:
      type: object
      properties:
        name:
          type: string
        filename:
          type: string
    AdditionalFileInfoWithID:
      allOf:
        - $ref: "#/components/schemas/AdditionalFileInfoInput"
        - $ref: "#/components/schemas/objectWithID"
    AdditionalFileListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalFileInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
    CertInfoInput:
      type: object
      properties:
        name:
          type: string
        domains:
          type: array
          items:
            type: string
        is_manual_mode:
          type: boolean
        provider:
          type: string
        certificate:
          type: string
        private_key:
          type: string
        intermediate_certificate:
          type: string
        csr:
          type: string
    CertInfoWithID:
      allOf:
        - $ref: "#/components/schemas/CertInfoInput"
        - $ref: "#/components/schemas/objectWithID"
        - type: object
          properties:
            expires_at:
              $ref: "#/components/schemas/timestamp"
    CertListResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/CertInfoWithID"
        limit:
          type: integer
        page_max:
          $ref: "#/components/schemas/page_max"
