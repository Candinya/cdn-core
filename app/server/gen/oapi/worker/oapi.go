// Package worker provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package worker

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	TokenAuthScopes = "TokenAuth.Scopes"
)

// FileUpdateRecord defines model for FileUpdateRecord.
type FileUpdateRecord struct {
	Path string `json:"path"`

	// UpdatedAt unix second
	UpdatedAt Timestamp `json:"updated_at"`
}

// HeartbeatRes defines model for HeartbeatRes.
type HeartbeatRes struct {
	// ConfigUpdatedAt unix second
	ConfigUpdatedAt Timestamp          `json:"config_updated_at"`
	FilesUpdatedAt  []FileUpdateRecord `json:"files_updated_at"`
}

// Timestamp unix second
type Timestamp = int64

// Id defines model for id.
type Id = uint

// GetFilesParams defines parameters for GetFiles.
type GetFilesParams struct {
	// XFilePath Path of target file
	XFilePath *string `json:"X-File-Path,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get config
	// (GET /{id}/config)
	GetConfig(ctx echo.Context, id Id) error
	// get single file
	// (GET /{id}/file)
	GetFiles(ctx echo.Context, id Id, params GetFilesParams) error
	// heartbeat event
	// (GET /{id}/heartbeat)
	Heartbeat(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx, id)
	return err
}

// GetFiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetFiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilesParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-File-Path" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-File-Path")]; found {
		var XFilePath string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-File-Path, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-File-Path", valueList[0], &XFilePath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-File-Path: %s", err))
		}

		params.XFilePath = &XFilePath
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFiles(ctx, id, params)
	return err
}

// Heartbeat converts echo context to params.
func (w *ServerInterfaceWrapper) Heartbeat(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Heartbeat(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/:id/config", wrapper.GetConfig)
	router.GET(baseURL+"/:id/file", wrapper.GetFiles)
	router.GET(baseURL+"/:id/heartbeat", wrapper.Heartbeat)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2/bNhD/KsRtDxsgW96W7UFvQYtteSmCdsMKBEZBU2eLjURyx5Nbw9B3H46S5Tiy",
	"kSBYHvqSWBZ59/vHo/dgfBO8Q8cRij0ETbpBRkpPtpS/JUZDNrD1Dgq4eQsZWPkUNFeQgdMNQiFrM4im",
	"wkbLprWnRjMU0FrHkAHvQlrlGDdI0HXdYXXq9Lut8e9Qasb3aDylvoF8QGKLAzKu5P9QKDJZt4EugzZt",
	"Kz9Jtz18T7iGAr7Lj7zyoU/OtsHIugkg3Qn/bS1hCcXdgcqDUssRsl99RsPS6U/UxCvU/H6AdALQeLe2",
	"m08vgpPB2tYYH222jE18qspEuW5Eron0bsJ1ivNM93P0j3gnoWid/aoiGu8kBaP31vFvV+fMzyCiacny",
	"7oPQ6AX8y9+ju257mxM92bRCTUjHIhVz6ONj3dqnRFiu5c0bXZY79RZru0XaqXfIXzzdq5n6x9M9krq+",
	"vYEMtkixB72YL+YLIeYDOh0sFPDLfDH/CbKUh4Qp39uyy3vJ5HmDyRnxXQv3mxIK+AP5Tb8iOzlAd+ed",
	"Oy7JbQndUuyJwbvYy/DzYjHEidGlboxfOTfCTnwa1dFnjoPocmrNh9YYjFF4Xi2upta98yq2plLWRdbO",
	"oPqhxBoZS+VJsViiGhsbzab6UYr82sN7NBQcIzldq4i0RVJI5E99Tmo8cPhuKcRj2zSadlCIsMocRGS9",
	"EfngSzIOllKod+IgwCUf5DTEF9mQPeZ0q7lSfq1Yk4BLnYfJV6EuUyaH2fdxJn1nt/0UuWzO01brEGpr",
	"EqXcG0aeRSbUzanp4wFbWSfyZc+PQTaAT/0/zvrJUc6ueWpq/06Nx34qxhHRc8du93/EUL5KCF43jtG6",
	"TY0HrpczWR2uhYvBHC+OVxoQD1PzOYoE+2d6c3KlfbvTY7RA4Rb73xsTu1I5qd8L31INBeQ62HxY0y27",
	"/wIAAP//VjrxcQ8JAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
